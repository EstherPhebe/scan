/**************************************************************************************************
                                        GRADLE CONFIG
 *************************************************************************************************/
apply plugin: 'jacoco'
apply plugin: 'com.android.application'

group = 'org.opendatakit'
def androidVersionCode = 127
version = androidVersionCode

android {
    buildToolsVersion "22.0.1"
    compileSdkVersion 20
    defaultConfig {
        applicationId "${group}.scan"
        minSdkVersion 16
        targetSdkVersion 20
        versionCode androidVersionCode
        versionName '2.0'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    packagingOptions {
        pickFirst 'META-INF/LICENSE'        /* File 1: jackson-databind-2.4.1.3.jar
                                               File 2: jackson-annotations-2.4.1.jar */

        pickFirst 'META-INF/LICENSE.txt'    /* File 1: commons-io-2.4.jar
                                               File 2: commons-lang3-3.1.jar */

        pickFirst 'META-INF/NOTICE'         /* File 1: jackson-core-2.4.1.1.jar
                                               File 2: jackson-databind-2.4.1.3.jar */

        pickFirst 'META-INF/NOTICE.txt'     /* File 1: commons-io-2.4.jar
                                               File 2: commons-lang3-3.1.jar */
    }
}

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')

    def libraryProjectGradle = new File('../androidlibrary/androidlibrary_lib/build.gradle')
    if (libraryProjectGradle.isFile()) {
        compile project(':androidlibrary:androidlibrary_lib')
    } else {
        compile(group: 'org.opendatakit', name: 'androidlibrary_lib', version: 'becb87a', ext: 'aar')
    }

    def commonProjectGradle = new File('../androidcommon/androidcommon_lib/build.gradle')
    if (commonProjectGradle.isFile()) {
        compile project(':androidcommon:androidcommon_lib')
    } else {
        compile(group: 'org.opendatakit', name: 'androidcommon_lib', version: '528b1d0', ext: 'aar')
    }

    testCompile 'junit:junit:4.12'
}

/**************************************************************************************************
 CUSTOM TASKS
 *************************************************************************************************/

// Code to generate JaCoCo reports
task jacocoTestDebugReport(type:JacocoReport, dependsOn: ["jacocoMergeGen"]) {
    group = "Reporting"
    description = "Generate a JaCoCo code-coverage report for debug tests"

    classDirectories = fileTree( // Include relevant .class files
            dir: "${buildDir}/intermediates/classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       '**/*Test*.class']
    )

    sourceDirectories = files("${buildDir.parent}/src/main/java") // Set src directories
    additionalSourceDirs = files([
            "${buildDir}/generated/source/buildConfig/debug",
            "${buildDir}/generated/source/r/debug"
    ])

    // Generate report from merged .exec file
    executionData = files("${buildDir}/jacoco/jacocoMergeGen.exec")

    reports { // Report output config
        xml {
            enabled = true
            destination "${project.buildDir}/reports/jacoco/jacoco.xml"
        }
        html {
            enabled = true
            destination "${project.buildDir}/reports/jacoco"
        }
    }
}

// Code to merge JaCoCo .exec/.ec files
// Outputs to ${buildDir}/jacoco/TASK_NAME.exec
// TODO: Put back "testDebug" when junit tests exist
task jacocoMergeGen(type: JacocoMerge, dependsOn: ["connectedAndroidTestDebug"]) {
    description = 'Merge test code-coverage results from all different test types'

    executionData = files([
            // Add any additional .exec/.ec files here if additional flavors of test need to be included
            // TODO when junit tests exist: "${buildDir}/jacoco/testDebug.exec", // UnitTest output
            "${buildDir}/outputs/code-coverage/connected/coverage.ec" // AndroidTest output
    ])
}